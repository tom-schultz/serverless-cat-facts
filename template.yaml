AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >
  This SAM template creates the following resources:

    Cat facts API: API Gateway in front of a Lambda function that returns a cat fact from DynamoDB, including associated IAM roles
    Cat facts table: DynamoDB table full of delightful cat facts

  Last Modified: 8th November 2017 
  Author: Tom Schultz <tom@soapstonetech.com>

Outputs:
  HttpsEndpoint:
    Description: "Endpoint URL for cat facts!"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/catfact"

Resources:
  CatFactsServiceIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "cat-facts-dynamo-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "dynamodb:Query"
                Resource: !Join
                  - ""
                  - - "arn:aws:dynamodb:"
                    - !Ref "AWS::Region"
                    - ":"
                    - !Ref "AWS::AccountId"
                    - ":table/"
                    - !Ref CatFactsTable

  CatFactsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: cat_facts.get
      Runtime: python2.7
      CodeUri: s3://tam-temp/cat_facts.zip
      Role: !GetAtt CatFactsServiceIAMRole.Arn
      Events:
        GetAction:
          Type: Api
          Properties:
            Path: /catfact
            Method: get
      Environment:
        Variables:
          TABLE_NAME: !Ref CatFactsTable

  CatFactsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "CatFacts"
    #Type: "AWS::Serverless::SimpleTable"
    #Properties:
      #PrimaryKey:
        #Name: id
        #Type: String
      #ProvisionedThroughput:
        #ReadCapacityUnits: 5
        #WriteCapacityUnits: 5
